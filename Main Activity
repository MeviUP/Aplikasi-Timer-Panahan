package com.example.timercountdown;

import android.content.BroadcastReceiver;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.Build;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.ArrayAdapter;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.Toolbar;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {
    Button btn1;
    Button btn2;
    Button btn3;
    Button btn4;
    private BluetoothAdapter BA;
    private Set<BluetoothDevice> pairedDevices;
    ListView lst;
    private EditText editTextInput;
    private EditText editTextInput1;
    private TextView coundownText;
    private Button coundownButton;
    private Button coundownReset;
    private Button coundownSet;
    private Button coundownSet1;
    private Button Set4;
    private Button Set2;
    private Button Set40;
    private Switch Switch1;
    private Switch Switch2;
    private String deviceAddress;

    private CountDownTimer countDownTimer;
    private long timeLeftInMilliseconds;  //10mins
    private long startTimeInMilliseconds;
    private long endTime;
    private boolean timerRunning;
    private Toolbar supportActionBar;

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);
        btn1 = (Button) findViewById(R.id.btnOn);
        btn2 = (Button) findViewById(R.id.btnOff);
        btn3 = (Button) findViewById(R.id.btnList);
        btn4 = (Button) findViewById(R.id.btnVisible);
        BA = (BluetoothAdapter.getDefaultAdapter());
        lst = (ListView) findViewById(R.id.listView);
        editTextInput = findViewById(R.id.edit_text_input);
        editTextInput1 = findViewById(R.id.edit_text_input1);
        coundownText = findViewById(R.id.coundown_time);
        coundownButton = findViewById(R.id.coundown_start);
        coundownReset = findViewById(R.id.coundown_reset);
        coundownSet = findViewById(R.id.button_set);
        coundownSet1 = findViewById(R.id.button_set1);
        Set4 = findViewById(R.id.button4);
        Set2 = findViewById(R.id.button2);
        Set40 = findViewById(R.id.button40);
        Switch1 = findViewById(R.id.switch1);
        Switch2 = findViewById(R.id.switch2);
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        BroadcastReceiver receiver = null;
        registerReceiver(receiver, filter);
        
        Set4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                long millisInput = 60000 * 4;
                setTime(millisInput);
            }
        });

        Set2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                long millisInput = 60000 * 2;
                setTime(millisInput);
            }
        });

        Set40.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                long millisInput = 10000 * 4;
                setTime(millisInput);
            }
        });

        coundownSet.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String input = editTextInput1.getText().toString();
                if (input.length() == 0) {
                    Toast.makeText(MainActivity.this, "Field can't be empty", Toast.LENGTH_SHORT).show();
                    return;
                }
                long millisInput = Long.parseLong(input) * 60000;
                if (millisInput == 0) {
                    Toast.makeText(MainActivity.this, "Please enter a positive number", Toast.LENGTH_SHORT).show();
                    return;
                }
                setTime(millisInput);
                editTextInput1.setText("");


            }
        });

        coundownSet1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String input = editTextInput.getText().toString();
                if (input.length() == 0) {
                   Toast.makeText(MainActivity.this, "Field can't be empty", Toast.LENGTH_SHORT).show();
                    return;
                }
                long millisInput = Long.parseLong(input) * 1000;
                if (millisInput == 0) {
                    Toast.makeText(MainActivity.this, "Please enter a positive number", Toast.LENGTH_SHORT).show();
                    return;
                }
                setTime(millisInput);
                editTextInput.setText("");
            }
        });
        coundownButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (timerRunning) {
                    pauseTimer();
                } else {
                    startTimer();
                }
            }
        });
        coundownReset.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                resetTimer();
            }
        });

        btn3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                list();
            }
        });
    }

    private void list() {
        pairedDevices = BA.getBondedDevices();
        ArrayList list = new ArrayList();
        for (BluetoothDevice bt : pairedDevices)
            list.add(bt.getName() + "\n" + deviceAddress.getBytes());
        Toast.makeText(getApplicationContext(), "Menampilkan perangkat bluetooth",
                Toast.LENGTH_SHORT).show();
        final ArrayAdapter adapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1);
        lst.setAdapter(adapter);
    }

    public void visible(View v) {
        Intent getVisible = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
        startActivityForResult(getVisible, 0);
    }

    public void off(View v) {
        BA.disable();
        Toast.makeText(getApplicationContext(), "Mematikan Bluetooth",
                Toast.LENGTH_SHORT).show();
    }

    public void on(View v) {
        if(!BA.isEnabled()){
            Intent turnOn = new Intent (BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(turnOn, 0);
            Toast.makeText(getApplicationContext(), "Menghidupkan Bluetooth",
                    Toast.LENGTH_SHORT).show();
        }else{
            Toast.makeText(getApplicationContext(), "Bluetooth Telah Hidup",
                    Toast.LENGTH_SHORT).show();
        }
    }
    private void setTime(long milliseconds) {
        startTimeInMilliseconds = milliseconds;
        resetTimer();
        closeKeyboard();
    }

    private void startTimer() {
        endTime = System.currentTimeMillis() + timeLeftInMilliseconds;
        countDownTimer = new CountDownTimer(timeLeftInMilliseconds, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                timeLeftInMilliseconds = millisUntilFinished;
                updateCountDownText();
            }

            @Override
            public void onFinish() {
                timerRunning = false;
                updateWatchInterface();
            }
        }.start();
        timerRunning = true;
        updateWatchInterface();
    }

    private void pauseTimer() {
        countDownTimer.cancel();
        timerRunning = false;
        updateWatchInterface();
    }

    private void resetTimer() {
        timeLeftInMilliseconds = startTimeInMilliseconds;
        updateCountDownText();
        updateWatchInterface();
    }

    private void updateCountDownText() {
        int hours = (int) (timeLeftInMilliseconds / 1000) / 3600;
        int minutes = (int) ((timeLeftInMilliseconds / 1000) % 3600) / 60;
        int seconds = (int) (timeLeftInMilliseconds / 1000) % 60;
        String timeLeftFormatted;
        if (hours > 0) {
            timeLeftFormatted = String.format(Locale.getDefault(),
                    "%d:%02d:%02d", hours, minutes, seconds);
        } else {
            timeLeftFormatted = String.format(Locale.getDefault(),
                    "%02d:%02d", minutes, seconds);
        }
        coundownText.setText(timeLeftFormatted);
    }

    private void updateWatchInterface() {
        if (timerRunning) {
            editTextInput.setVisibility(View.INVISIBLE);
            editTextInput1.setVisibility(View.INVISIBLE);
            coundownSet.setVisibility(View.INVISIBLE);
            coundownSet1.setVisibility(View.INVISIBLE);
            coundownReset.setVisibility(View.INVISIBLE);
            Set4.setVisibility(View.INVISIBLE);
            Set2.setVisibility(View.INVISIBLE);
            Set40.setVisibility(View.INVISIBLE);
            coundownButton.setText("Pause");
        } else {
            editTextInput.setVisibility(View.VISIBLE);
            editTextInput1.setVisibility(View.VISIBLE);
            coundownSet.setVisibility(View.VISIBLE);
            coundownSet1.setVisibility(View.VISIBLE);
            Set4.setVisibility(View.VISIBLE);
            Set2.setVisibility(View.VISIBLE);
            Set40.setVisibility(View.VISIBLE);
            coundownButton.setText("Start");
            if (timeLeftInMilliseconds < 1000) {
                coundownButton.setVisibility(View.INVISIBLE);
            } else {
                coundownButton.setVisibility(View.VISIBLE);
            }
            if (timeLeftInMilliseconds < startTimeInMilliseconds) {
                coundownReset.setVisibility(View.VISIBLE);
            } else {
                coundownReset.setVisibility(View.INVISIBLE);
            }
        }
    }

    private void closeKeyboard() {
        View view = this.getCurrentFocus();
        if (view != null) {
            InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);
            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        SharedPreferences prefs = getSharedPreferences("prefs", MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putLong("startTimeInMillis", startTimeInMilliseconds);
        editor.putLong("millisLeft", timeLeftInMilliseconds);
        editor.putBoolean("timerRunning", timerRunning);
        editor.putLong("endTime", endTime);
        editor.apply();
        if (countDownTimer != null) {
            countDownTimer.cancel();
        }
    }

    @Override
    protected void onStart() {
        super.onStart();
        SharedPreferences prefs = getSharedPreferences("prefs", MODE_PRIVATE);
        startTimeInMilliseconds = prefs.getLong("startTimeInMillis", 600000);
        timeLeftInMilliseconds = prefs.getLong("millisLeft", startTimeInMilliseconds);
        timerRunning = prefs.getBoolean("timerRunning", false);
        updateCountDownText();
        updateWatchInterface();
        if (timerRunning) {
            endTime = prefs.getLong("endTime", 0);
            timeLeftInMilliseconds = endTime - System.currentTimeMillis();
            if (timeLeftInMilliseconds < 0) {
                timeLeftInMilliseconds = 0;
                timerRunning = false;
                updateCountDownText();
                updateWatchInterface();
            } else {
                startTimer();
            }
        }
    }

}
